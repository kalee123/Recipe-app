{"version":3,"sources":["components/SearchBar.js","components/fetch.js","components/EachRecipe.js","components/RecipeList.js","App.js","RecipeDetail.js","components/Header.js","serviceWorker.js","index.js"],"names":["SearchBar","props","className","onSubmit","e","onClick","type","value","searchVal","onChange","required","fetchRecipes","recipe","a","console","log","url","fetch","response","json","result","localStorage","setItem","JSON","stringify","hits","EachRecipe","index","label","image","key","src","alt","length","substring","to","RecipeList","recipes","map","item","App","handleChange","setState","target","searchRecipes","preventDefault","state","isRecived","getItem","parse","this","onLoaded","runAfterImagesLoaded","onTimeout","runTimeoutFunction","timeout","Component","RecipeDetail","temmpRecipe","id","useParams","filter","ingredientLines","Header","Boolean","window","location","hostname","match","onbeforeunload","clear","ReactDOM","render","StrictMode","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cc026070.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBar = (props) => {\r\n    return (\r\n        <form className=\"search-bar\" onSubmit={e => props.onClick(e)}>\r\n            <input\r\n                type=\"text\"\r\n                value={props.searchVal}\r\n                onChange={e => props.onChange(e)}\r\n                required/>\r\n            <button>search</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default SearchBar; ","\r\n\r\nexport const fetchRecipes = async recipe => {\r\n    console.log(\"fetch\");\r\n    const appId = \"0a886643\";\r\n    const key = \"de87a8e0ff945e5d71564ed45bbac0f4\";\r\n    const url = `https://api.edamam.com/search?q=${recipe}&app_id=${appId}&app_key=${key}&from=0&to=10`;\r\n    //Api call promise\r\n    try {\r\n      let response = await fetch(url);\r\n      let result = await response.json();\r\n      localStorage.setItem(\"recipes\", JSON.stringify(result.hits));\r\n      return result.hits;\r\n    } catch (error) {\r\n      let response = [];\r\n      return response;\r\n    }\r\n  };","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst EachRecipe = (props) => {\r\n    const {index,label,image} = props;\r\n    return (\r\n        <div key={index} className=\"recipe-item\">\r\n            <img src={image} alt={label} />\r\n            <h3>{label.length>18?`${label.substring(0, 17)}...`:`${label}`}</h3>\r\n            <Link to={`/RecipeDetail/${label}`} >\r\n                <button className=\"btn\">        \r\n                    About\r\n                </button>\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EachRecipe;","import React from 'react';\r\nimport EachRecipe from './EachRecipe';\r\n\r\nconst RecipeList = (props) => {\r\n\r\n    return (\r\n        <div className=\"recipe-container\">\r\n            {\r\n                props.recipes.map((item,index)=>{\r\n                    const {label}=item.recipe;\r\n                    const {image}=item.recipe;\r\n                    return <EachRecipe key={index} image={image} label={label} />;\r\n                    \r\n                })\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RecipeList;","import React, { Component } from 'react';\nimport './App.css';\nimport SearchBar from './components/SearchBar';\nimport {fetchRecipes} from './components/fetch';\nimport RecipeList from './components/RecipeList';\nimport OnImagesLoaded from 'react-on-images-loaded';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      recipes: [],\n      isRecived: false,\n      value: ''\n    };\n  }\n\n  async componentDidMount(){\n    if(localStorage.getItem('recipes')){\n      let recipes = JSON.parse(localStorage.getItem('recipes'));\n      this.setState({\n        recipes,\n        isRecived: true\n      });\n      return;\n    }\n      let recipes = await fetchRecipes('egg rice');\n      this.setState({\n        recipes,\n        isRecived: true\n      });\n      console.log(this.state.recipes);\n  }\n \n  handleChange = (e) => {\n    this.setState({\n        value: e.target.value\n    })\n  }\n  searchRecipes = async (e) =>{\n    e.preventDefault();\n    let recipes = await fetchRecipes(this.state.value);\n    console.log(recipes);\n      this.setState({\n        recipes,\n        isRecived: true\n      });\n  }\n  render() {\n    if(!this.state.isRecived){\n      return (\n        <div>Loading...</div>\n      )\n    }\n    return (\n      <OnImagesLoaded\n  onLoaded={this.runAfterImagesLoaded}\n  onTimeout={this.runTimeoutFunction}\n  timeout={7000}\n>\n      <div className=\"app\">\n        <SearchBar\n          searchVal={this.state.value}\n          onChange={this.handleChange}\n          onClick={this.searchRecipes}\n        />\n        <RecipeList recipes={this.state.recipes} />       \n      </div>\n      </OnImagesLoaded>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\r\nimport {Link,useParams} from 'react-router-dom';\r\n\r\nfunction RecipeDetail() {\r\n      let temmpRecipe = JSON.parse(localStorage.getItem('recipes'));\r\n      let { id } = useParams();\r\n      let currentRecipe = temmpRecipe.filter(item =>{\r\n          console.log(item.recipe.label);\r\n            return item.recipe.label === id \r\n      });\r\n      let {label,image,ingredientLines} = currentRecipe[0].recipe;\r\n      console.log(`label=${label},image=${image},lines=${ingredientLines}`);\r\n        return (\r\n        <>\r\n        <div className=\"recipe-Container\">\r\n            <div className=\"img-container\">\r\n                <img src={image} alt=\"food\" />\r\n            </div>\r\n            <div className=\"recipe-details\">\r\n                <h1>{label}</h1>\r\n                <ol>\r\n                    {ingredientLines.map((item,index) => {\r\n                        return <li key={index}>{item}</li>;\r\n                    })}\r\n                </ol>\r\n            </div>\r\n            <Link to=\"/\">\r\n                <div className=\"home-Link\">\r\n                    Home\r\n                </div>\r\n            </Link>\r\n        </div>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default RecipeDetail;","import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"header\">\r\n            <h1>Recipe App</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport RecipeDetail from './RecipeDetail';\nimport Header from './components/Header';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router,Switch,Route} from 'react-router-dom';\n\nwindow.onbeforeunload = function() {\n  localStorage.clear();\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Header />\n      <Switch>\n        <Route exact path=\"/Recipe-App/\" component={App} />\n        <Route exact path=\"/Recipe-App/RecipeDetail/:id\" component={RecipeDetail} />\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}